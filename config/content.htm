<h1>About</h1>
<p><br/><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<h1>W4</h1>
<p><span>Replit</span><span><span> </span>個人倉儲進行設定操作</span></p>
<p><span><video controls="controls" height="641" width="1000">
<source src="/downloads/28.mp4" type="video/mp4"/></video></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<h1>W5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p><img alt="" height="400" src="/images/motion_plot.png" width="800"/></p><h1>W6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p><br/><br/>}<img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<p></p>
<p><br/><br/><br/><br/><br/></p>
<p><br/><br/><br/><br/></p>
<p></p>
<p></p>
<p><br/><br/></p>
<h1>ANSIC</h1>
<p><br/><br/><br/><br/>1.</p>
<p><span>編寫一個 C 程式來列印您的姓名、出生日期和手機號碼</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;將sidio.h的檔案內容加進來
//int main()
//{}表示一個區塊的開始和結束
//printf()把框框內的文字列印到螢幕上
//;分號代表句子的結束
//\n表示換行
//return(0);回傳0這個值
#include &lt;stdio.h&gt;
int main()
{
printf("Name :王凱瑞\n");
printf("DOB :April 24, 2005\n");
printf("Mobile :0966-636-108\n");
return(0);  
}</pre>
<p><img alt="" height="200" src="/images/螢幕擷取畫面 2023-12-27 003050.png" width="615"/></p>
<p></p>
<p></p>
<p><br/><br/><br/>2.<span></span></p>
<p><span>編寫一個 C 程式來列印您的姓名、出生日期和手機號碼</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;將sidio.h的檔案內容加進來
//int main()
//{}表示一個區塊的開始和結束
//printf()把框框內的文字列印到螢幕上
//;分號代表句子的結束
//\n表示換行
//return(0);回傳0這個值
#include &lt;stdio.h&gt;
int main()
{
printf("Name :王凱瑞\n");
printf("DOB :April 24, 2005\n");
printf("Mobile :0966-636-108\n");
return(0);  
}</pre>
<p><img alt="" height="200" src="/images/螢幕擷取畫面 2023-12-27 003050.png" width="615"/></p>
<p></p>
<p></p>
<p><br/>3.<span>寫一個 C 程序，使用哈希 (#) 列印一個區塊 A</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;將sidio.h的檔案內容加進來
//int main()
//{}表示一個區塊的開始和結束
//printf()把框框內的文字列印到螢幕上
//;分號代表句子的結束
//\n表示換行
//return(0);回傳0這個值
#include &lt;stdio.h&gt;
int main(){
printf("          ######\n");
printf("        ##      ##\n");
printf("       ##        ##\n");
printf("      ##          ##\n");
printf("     ################\n");
printf("    ##              ##\n");
printf("   ##                ##\n");
printf("  ##                  ##\n");
  
return(0);
}</pre>
<p><img alt="" height="200" src="/images/螢幕擷取畫面 2023-12-27 004322.png" width="317"/></p>
<p><br/>4.<span>寫一個C 程序，反向列印下列字元</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;將sidio.h的檔案內容加進來
//int main()
//char a = 'A'
//{}表示一個區塊的開始和結束
//printf()把框框內的文字列印到螢幕上
//%c是字元型態
//;分號代表句子的結束
//return(0);回傳0這個值
#include &lt;stdio.h&gt;

int main(){
char x1 = 'A';
char x2 = 'B';
char x3 = 'C';
  printf("The reverse of %c%c%c is%c%c%c",x1,x2,x3,x3,x2,x1);
  return(0);
  
}</pre>
<p><img alt="" height="87" src="/images/螢幕擷取畫面 2023-12-27 210334.png" width="527"/></p>
<p><br/>5.<span>寫一個 C 程式來計算高 7 英吋、寬 5 英吋的矩形的周長和面積</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;將sidio.h的檔案內容加進來
//int main()
//int width寬
//int height高
//int area面積
//perimeter周長
//{}表示一個區塊的開始和結束
//printf()把框框內的文字列印到螢幕上
//;分號代表句子的結束
//\n表示換行
//return(0);回傳0這個值
#include &lt;stdio.h&gt;
int width;
int height;
int area;
int perimeter;
int main(){
  height = 7;
  width = 5;
  perimeter = 2*(height+width);
  printf("Perimeter of the rectangle = %d inches\n",perimeter);
  area = height*width;
  printf("Area of the rectangle = %d square inches\n",area);
  return(0);
}</pre>
<p><img alt="" height="113" src="/images/螢幕擷取畫面 2023-12-27 211043.png" width="503"/></p>
<p>6.寫一個程式從鍵盤讀三個數最後相加</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;將sidio.h的檔案內容加進來
//int main()
//{}表示一個區塊的開始和結束
//printf()把框框內的文字列印到螢幕上
//;分號代表句子的結束
//\n表示換行
//return(0);回傳0這個值
//int是一個整數
//int integer是一個變數
//scanf表示從鍵盤讀入資料
//%d表示十進位的整數
//&amp;是取址運算
#include &lt;stdio.h&gt;
int main(){
  int integer1;
  int integer2;
  int integer3;
  int sum;
  printf("Please enter first integer: ");
  scanf("%d", &amp;integer1);
  printf("Please enter second integer: ");
  scanf("%d", &amp;integer2);
  printf("Please enter second integer: ");
  scanf("%d", &amp;integer3);
  sum = integer1+integer2+integer3;
  printf("Sum is %d.\n", sum);
  return(0);
}</pre>
<p><img alt="" height="105" src="/images/螢幕擷取畫面 2023-12-27 220720.png" width="568"/></p>
<p><br/>7<strong><span>.</span></strong><span><span>寫一個 C 程式來計算給定半徑的圓的周長和面積。</span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;將sidio.h的檔案內容加進來
//int main()
//int radius半徑
//int area面積
//perimeter周長
//perimeter = 2*3.14*radius;計算圓周
//{}表示一個區塊的開始和結束
//printf()把框框內的文字列印到螢幕上
//;分號代表句子的結束
//\n表示換行
//return(0);回傳0這個值
#include &lt;stdio.h&gt;
int main(){
int radius;
float area, perimeter;
radius = 5;
perimeter = 2*3.14*radius;
printf("Perimeter of the Circle = %f inches\n", perimeter);
area = 3.14 * radius * radius;
printf("Area of the Circle = %f square inches\n", area);
return(0);
}</pre>
<p><br/><br/><br/><img alt="" height="179" src="/images/螢幕擷取畫面 2023-12-28 001218.png" width="498"/><br/><br/></p>
<p>8讀取鍵盤輸入的了個數在印出來</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//int是一個整數
//int integer是一個變數
//scanf表示從鍵盤讀入資料
//%d表示十進位的整數
//&amp;是取址運算
//int tmp =integer1;等號左邊先做
// printf("integer1: %d\n",integer1);印出來
// printf("integer2: %d\n",integer2);印出來
#include &lt;stdio.h&gt;
int main(){
  int integer1,integer2;
  printf("Please enter first integer: ");
  scanf("%d", &amp;integer1);
  printf("Please enter second integer: ");
  scanf("%d", &amp;integer2);
int tmp =integer1;
    integer1 =integer2;
    integer2 = tmp;
    printf("integer1: %d\n",integer1);
    printf("integer2: %d\n",integer2);
    
  return(0);
}</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-28 002331.png" width="556"/></p>
<p>9.<span>寫一個C 程式來顯示多個變數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//((int)dx) 表示将变量 dx 强制转换为整数类型
//float x = 2.13459;代表浮點數
//'w' 的ASCII值（119）
//printf("a+c = %d\n",a+c);計算後的值然後印出
#include &lt;stdio.h&gt;
int main()
{
  int a =125,b = 12345;
  long ax = 123456780;
  short s = 4043;
  float x = 2.13459;
  double dx = 1.1415927;
  char c = 'w';
  unsigned long ux = 2541567890;
  printf("a+c = %d\n",a+c);
  printf("x+c = %f\n",x+c);
  printf("dx+x = %f\n",dx+x);
  printf("((int)dx)+ax = %ld\n",((int)dx)+ax);
  printf("a+x = %f\n",a+x);
  printf("s+b = %d\n",s+b);
  printf("ax+b = %ld\n",ax+b);
  printf("s+c = %hd\n",s+c);
  printf("ax+c = %ld\n",ax+c);
  printf("ax+ux = %lu\n",ax+ux);
  return (0);
  
}</pre>
<p><img alt="" height="441" src="/images/螢幕擷取畫面 2023-12-28 005739.png" width="503"/></p>
<p>10.<span>編寫一個 C 程序，將指定的日期轉換為年、週和日</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//weeks = (days % 365)/7;,a % b 将给出 a 除以 b 的余数。
//days = 1329;等號左邊先做
//days = days - ((years*365) + (weeks*7));減去年和周所佔的天數即可得到剩餘的天數
//years = days/365;天除以1年365及得到年
#include &lt;stdio.h&gt;
int main()
{
  int days,years,weeks;
  days = 1329;
  years = days/365;
  weeks = (days % 365)/7;
  days = days - ((years*365) + (weeks*7));
  printf("Years: %d\n",years);
  printf("Weeks: %d\n",weeks);
  printf("Days: %d\n",days);
  return (0);
}</pre>
<p><img alt="" height="191" src="/images/螢幕擷取畫面 2024-01-11 192955.png" width="466"/></p>
<h1>c_ex</h1>
<h2>2-1</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//#include &lt;stdio.h&gt;printf這個函數定義放在stdio.h裡面
//main() 這個 function 傳回(return)一個整數的數值, 執行這個程式在結束時, 會將這個整數的數值傳回給作業系統
//printf("Hello World");在螢幕上印出
#include &lt;stdio.h&gt;
int main()
{
  printf("Hello World");
  return(0);
}</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-28 142657.png" width="385"/></p>
<h2>2-2</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//int a,A,b,c;宣告變數
//a=1;A=8;b=2;左邊值填入右邊
//c=A-b+c;計算出的值放入c
//printf("%d",c);再把值印出來
#include &lt;stdio.h&gt;
int main(){
  int a,A,b,c;
  a=1;
  A=8;
  b=2;
  c=A-b+c;
  printf("%d",c);
  return(0);
  
}</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-28 213404.png" width="476"/><br/><br/></p>
<h2>2-3</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//float浮點數
//double倍精準浮點數  
//int整數
//float a =0.5;double b = 1.2;int c = 3;定義代號
//b = a+c+b;機算完帶入b
//printf("a=%3.1f,b=%3.1f,c=%3.1d",a,b,c);印出
#include &lt;stdio.h&gt;
void main(){
  float a =0.5;
  double b = 1.2;
  int c = 3;
  b = a+c+b;
  printf("a=%3.1f,b=%3.1f,c=%3.1d",a,b,c);

}</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-29 001807.png" width="455"/></p>
<h2>2-4</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//char input,output;字元
//scanf鍵盤輸入的值
//output = input + 32;(ABC等等連號跟小寫差32)
//printf("%c\n", output);把結果印出
#include &lt;stdio.h&gt;
int main(){
  char input,output;
  scanf("%c",&amp;input);
  output = input + 32;
  printf("%c\n", output);
  return(0);
}</pre>
<p><img alt="" height="346" src="/images/螢幕擷取畫面 2023-12-29 003556.png" width="509"/></p>
<p></p>
<h2>2-5</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// char 宣告,字元是用單引號括起來
//  y = (char)97;ASCII 中, 字元 97
//printf("x=%c, y=%c,ASCII of y = %d",x,y,y);把結果印出來
#include &lt;stdio.h&gt;
int main(){
  char x,y;
  x = 'a';
  y = (char)97;
  printf("x=%c, y=%c,ASCII of y = %d",x,y,y);
  return(0);

}</pre>
<p><img alt="" height="109" src="/images/螢幕擷取畫面 2023-12-29 210354.png" width="529"/></p>
<h2>2-6</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 0x40代表的是一個16進位的數字
//0x40 與 10 進位的 64 值相同
//64L代表的是64這個數值的type(型態)是long
//printf("%d,%d,%ld",a,b,c);把結果印出
#include &lt;stdio.h&gt;
int main(){
  int a =64;
  int b =0x40;
  long c =64L;
  printf("%d,%d,%ld",a,b,c);
  return(0);
  
}
</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-29 212108.png" width="625"/></p>
<h2>2-7</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//printf("Input an integer:");輸入整數
//scanf("%d",&amp;i);存到i
// printf("the number is %d\n",i);在印出來
#include &lt;stdio.h&gt;
int main(){
  int i;
  printf("Input an integer:");
  scanf("%d",&amp;i);
  printf("the number is %d\n",i);
  return(0);
}</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-29 214050.png" width="303"/></p>
<h2>2-8</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//%顯示餘數,//顯示商數
//printf("%d\n",a*b);把結果印出
#include &lt;stdio.h&gt;
int main(){
  int a,b;
  a=10;
  b=3;
  printf("%d\n",a*b);
  printf("%d\n",a/b);
  printf("%d\n",a+b);
  printf("%d\n",a-b);
  printf("%d\n",a%b);
  return(0);
}</pre>
<p><img alt="" height="236" src="/images/螢幕擷取畫面 2023-12-30 223510.png" width="512"/></p>
<h2>2-9</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//==左右相等,&gt;大於,&lt;小於,&gt;=大於或等於,&lt;=小於或等於,!=不等於
// printf( " a == b is %d \n", a == b ); 判斷是否為真,真顯示1,假顯示0
#include &lt;stdio.h&gt; 
 int main() 
 { 
  int     a = 10, b = 5; 

  printf( " a == b is %d \n", a == b ); 
  printf( " a &gt; b is %d \n", a &gt; b ); 
  printf( " a &lt; b is %d \n", a &lt; b ); 
  printf( " a &gt;= b is %d \n", a &gt;= b ); 
  printf( " a &lt;= b is %d \n", a &lt;= b ); 
  printf( " a != b is %d \n", a != b ); 

  printf( "\n" ); 

  b = 10; 

  printf( " a == b is %d \n", a == b ); 
  printf( " a &gt; b is %d \n", a &gt; b ); 
  printf( " a &lt; b is %d \n", a &lt; b ); 
  printf( " a &gt;= b is %d \n", a &gt;= b ); 
  printf( " a &lt;= b is %d \n", a &lt;= b ); 
  printf( " a != b is %d \n", a != b ); 

  return 0; 
 }</pre>
<p><img alt="" height="540" src="/images/螢幕擷取畫面 2023-12-30 224818.png" width="560"/></p>
<h2>2-10</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//if(a&gt;4)如果a&gt;4
//printf("a is larger than 4.\n");才會把這行印出
#include &lt;stdio.h&gt;
int main(){
  int a = 3;//改5
  if(a&gt;4){
    printf("a is larger than 4.\n");
    
  }
  return(0);
}</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-30 231519.png" width="303"/></p>
<h2>3-1</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//printf("My first program\n");把這行印在螢幕上
#include &lt;stdio.h&gt;
int main(){
  printf("My first program\n");
  return(0);
}</pre>
<p><img alt="" height="144" src="/images/螢幕擷取畫面 2023-12-31 120535.png" width="626"/></p>
<h2>3-2</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//c = getchar();：這一行代碼用於獲取用戶輸入的字符，getchar函數從標準輸入中讀取一個字符，並將其賦值給變數c
//printf("Character entered: ");：這是另一個輸出語句，提示即將顯示用戶輸入的字符。

#include &lt;stdio.h&gt;
 int main () {
 char c;
 printf("Enter character: ");
 c = getchar(); 
 printf("Character entered: ");
 putchar(c); 
 return(0);
 }</pre>
<p></p>
<h2>3-3</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//scanf("%d", &amp;this_is_a_number1);scanf("%d", &amp;this_is_a_number2); 鍵盤讀取輸入的數字
//total = this_is_a_number1 + this_is_a_number2; 將變數相加
// printf("total is %d\n", total);印出結果
#include&lt;stdio.h&gt;
 int main()
 {
 int this_is_a_number1, this_is_a_number2, total;
 printf("Please enter an integer number:\n ");
 scanf("%d", &amp;this_is_a_number1); 
 printf("You entered %d\n", this_is_a_number1);
 printf("Please enter another number: \n");
 scanf("%d", &amp;this_is_a_number2); 
 printf("You entered %d\n", this_is_a_number2);
 total = this_is_a_number1 + this_is_a_number2; 
 printf("total is %d\n", total);
 return 0;
 }</pre>
<p><img alt="" height="328" src="/images/螢幕擷取畫面 2024-01-01 010513.png" width="554"/></p>
<p></p>
<h2>3-4</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//%f轉小數點
//scanf("%d", &amp;this_is_a_number1);scanf("%d", &amp;this_is_a_number2); 鍵盤讀取輸入的數字
// printf("You entered %f\n", this_is_a_number2);total = this_is_a_number1 + this_is_a_number2;將變數相加,印出結果
 printf("total is %f\n", total);
#include&lt;stdio.h&gt;
 int main()
 {
 float this_is_a_number1, this_is_a_number2, total;
 printf("Please enter a number:\n ");
 scanf("%f", &amp;this_is_a_number1); 
 printf("You entered %f\n", this_is_a_number1);
 printf("Please enter another number: \n");
 scanf("%f", &amp;this_is_a_number2); 
 printf("You entered %f\n", this_is_a_number2);
 total = this_is_a_number1 + this_is_a_number2;
 printf("total is %f\n", total);
 return 0;
 }
</pre>
<p><img alt="" height="339" src="/images/螢幕擷取畫面 2024-01-01 011356.png" width="498"/></p>
<h2>3-5</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//float this_is_a_number1, this_is_a_number2, total;變數有小數點
//scanf("%d", &amp;this_is_a_number1);scanf("%d", &amp;this_is_a_number2); 鍵盤讀取輸入的數字
//total = this_is_a_number1 * this_is_a_number2;將變數相乘
 //printf("product is %f\n", total);印出結果
#include &lt;stdio.h&gt;

 int main()
 {
 float this_is_a_number1, this_is_a_number2, total;
 printf("Please enter a number:\n ");
 scanf("%f", &amp;this_is_a_number1); 
 printf("You entered %f\n", this_is_a_number1);
 printf("Please enter another number: \n");
 scanf("%f", &amp;this_is_a_number2); 
 printf("You entered %f\n", this_is_a_number2);
 total = this_is_a_number1 * this_is_a_number2;
 printf("product is %f\n", total);
 return 0;
 }</pre>
<p><img alt="" height="341" src="/images/螢幕擷取畫面 2024-01-01 012404.png" width="494"/></p>
<p></p>
<h2>3-6</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//float this_is_a_number1, this_is_a_number2, total;變數有小數點
//scanf("%d", &amp;this_is_a_number1);scanf("%d", &amp;this_is_a_number2); 鍵盤讀取輸入的數字
//total = this_is_a_number1 / this_is_a_number2;將變數相除
//printf("quotient is %f\n", total);印出結果
#include &lt;stdio.h&gt;

 int main()
 {
 float this_is_a_number1, this_is_a_number2, total;
 printf("Please enter a number: \n");
 scanf("%f", &amp;this_is_a_number1);
 printf("You entered %f\n", this_is_a_number1);
 printf("Please enter another number:\n ");
 scanf("%f", &amp;this_is_a_number2); 
 printf("You entered %f\n", this_is_a_number2);
 total = this_is_a_number1 / this_is_a_number2;
 printf("quotient is %f\n", total);
 return 0;
 }</pre>
<p><img alt="" height="282" src="/images/螢幕擷取畫面 2024-01-01 013150.png" width="513"/></p>
<p></p>
<h2>3-7</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*for (i = 0;i &lt; 10;i++)
 {

 for (j = 0;j &lt; 2;j++)
 {
 printf("Please enter a number:\n ");
 scanf("%f", &amp;this_is_a_number);
 total = total + this_is_a_number;
 }
 }*///外層循環遍歷10次，而內層循環每次外層循環迭代運行兩次
//total = total + this_is_a_number;把20次結果加起來
 
   #include&lt;stdio.h&gt;
 
 main()
 {
 float this_is_a_number, total;
 int i, j;
 total = 0;

 for (i = 0;i &lt; 10;i++)
 {

 for (j = 0;j &lt; 2;j++)
 {
 printf("Please enter a number:\n ");
 scanf("%f", &amp;this_is_a_number);
 total = total + this_is_a_number;
 }
 }
 printf("Total Sum is = %f\n", total);
 }</pre>
<p><img alt="" height="1052" src="/images/螢幕擷取畫面 2024-01-01 015059.png" width="505"/></p>
<p></p>
<h2>3-8</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//&amp;&amp;!一樣是不等於
//結果為真傳1,假傳0假傳0
#include &lt;stdio.h&gt; 
 void  main() 
 { 
  printf("%d\n", 1 &amp;&amp; 3 ); 
  printf("%d\n", 0 &amp;&amp; 0 ); 
  printf("%d\n", 2 &amp;&amp; 2 ); 
 } </pre>
<p><img alt="" height="205" src="/images/螢幕擷取畫面 2024-01-01 020822.png" width="539"/></p>
<h2>3-9</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//int 長度是 4. ,char b是1
#include &lt;stdio.h&gt;
void main()
{
char b;
printf( " The size of int is %ld\n", sizeof(int) );

printf( " The size of char a is %ld\n", sizeof(b) );
}
</pre>
<p><br/><img alt="" height="171" src="/images/螢幕擷取畫面 2024-01-01 215518.png" width="518"/></p>
<h2>3-10</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// int 是代表用了 area 這個函數後, 會傳回一個整數回去
//return result;這一行是把 result 傳回去.

#include &lt;stdio.h&gt; 
 
 int      rect( int x, int y ) 
 { 
  int      result; 
  result = x*y; 
  return result;           
 } 
 void   main() 
 { 
  int x = 100, y = 40; 
  int a; 

  a = rect( x, y ); 
  printf( "100*40 的面積是 %d", a ); 
 }</pre>
<p><img alt="" height="100" src="/images/螢幕擷取畫面 2024-01-01 220848.png" width="909"/></p>
<h1>W7</h1>
<h2>UK</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;

int main() {
    FILE *out;
    gdImagePtr im;
    int blue, red, white;

    // 创建一个600x400像素的图像
    im = gdImageCreate(600, 400);

    // 为蓝色、红色和白色分配颜色
    blue = gdImageColorAllocate(im, 16, 17, 181); // 蓝色的RGB值
    red = gdImageColorAllocate(im, 206, 17, 38);   // 红色的RGB值
    white = gdImageColorAllocate(im, 255, 255, 255); // 白色的RGB值

    // 用蓝色填充整个画布
    gdImageFilledRectangle(im, 0, 0, 599, 399, blue);

    // 设置线的粗细
    int thicknessVertical = 100;
    int thicknessHorizontal = 100;
    int thicknessDiagonal = 50;
    int thicknessred = 70; // Adjust the thickness of the white line
  int thicknessreds = 30;

    // 在中间绘制一条红色垂直线
    int x = 300;
    gdImageSetThickness(im, thicknessVertical);
    gdImageLine(im, x, 0, x, 399, white);

    // 在中间绘制一条红色水平线
    int y = 200;
    gdImageSetThickness(im, thicknessHorizontal);
  
    gdImageLine(im, 0, y, 599, y, white);

    //gdImageSetThickness(im, thicknessred);
  //gdImageLine(im, 0, y, 599, y, red);
    
    // 绘制第一条对角线
    gdImageSetThickness(im, thicknessDiagonal);
    gdImageLine(im, 0, 0, 599,399, white);
  
  gdImageSetThickness(im, thicknessreds);
    gdImageLine(im, 0, 0, 599, 399, red);

    // 绘制第二条对角线
    gdImageSetThickness(im, thicknessDiagonal);
    gdImageLine(im, 0, 399, 599, 0, white);
    gdImageSetThickness(im, thicknessreds);
    gdImageLine(im, 0, 399, 599, 0, red);
  

    // 设置白色线的粗细
    gdImageSetThickness(im, thicknessred);

    // 在中间绘制一条白色垂直线
    gdImageLine(im, x, 0, x, 399, red);
  gdImageLine(im,  0, 200, 599 , 200, red);
  
  
  
 
 
    // 恢复线的粗细
    gdImageSetThickness(im, thicknessVertical);

    // 将图像保存到文件
    out = fopen("uk_flag_with_lines.png", "wb");
    gdImagePng(im, out);
    fclose(out);

    // 释放内存
    gdImageDestroy(im);

    return 0;
}
</pre>
<p></p>
<p><img alt="" height="400" src="/images/uk_flag_with_lines.png" width="600"/></p>
<p></p>
<h2>PROC</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

gdPoint *drawThinStar(int x, int y, int radius, int numPoints);

void draw_star_circle(gdImagePtr img);

int main() {
    // 设置图像宽度和高度
    int width = 900;  // 可根据需要调整
    int height = 600;  // 可根据需要调整

    // 创建画布
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    // 设置红色背景
    int red = gdImageColorAllocate(img, 255, 0, 0);
    gdImageFill(img, 0, 0, red);

    // 确保画布成功创建
    if (img == NULL) {
        fprintf(stderr, "画布创建失败\n");
        return 1;  // 返回错误代码
    }

    // 绘制星星圈
    draw_star_circle(img);

    // 保存图片
    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    gdImagePng(img, outputFile);
    fclose(outputFile);

    // 释放内存
    gdImageDestroy(img);

    printf("星星圈已经绘制完成，保存为 proc_flag.png\n");

    return 0;
}

void draw_star_circle(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    // 分配颜色
    int yellow = gdImageColorAllocate(img, 255, 223, 0);  // 中黄色

    // 获取中心坐标
    int centerX = 110;
    int centerY = 170;

    // 半径和数量，调整半径以控制星星的间距
    int radius = height / 4;  // 调整为高度的四分之一
    int numStars = 4;  // 修改为4颗星星

    // 绘制星星圈
    for (int i = 0; i &lt; numStars; i++) {
        double angle = 3 * M_PI / 2 + (M_PI * i) / numStars + (M_PI / 12) + (M_PI / 10) - (M_PI / 18);  // Starting angle adjusted for the second quadrant and rotated counterclockwise by 5 degrees

        // 计算星星位置
        int starX = centerX + cos(angle) * radius;
        int starY = centerY + sin(angle) * radius;

        // 绘制五角星
        gdImageFilledPolygon(img, drawThinStar(starX, starY, height / 30, 5), 10, yellow);
    }
  int extraStarX = centerX;
  int extraStarY = centerY;

  gdImageFilledPolygon(img, drawThinStar(extraStarX, extraStarY, height / 10, 5), 10, yellow);
}

gdPoint *drawThinStar(int x, int y, int radius, int numPoints) {
    int i;
    static gdPoint star[11];

    for (i = 0; i &lt; 2 * numPoints; i++) {
        double outerRadius = (i % 2 == 0) ? radius * 1.5 : radius * 0.5;  // 调整星星尖角的长度
        double angle = M_PI * i / numPoints;
        star[i].x = x + cos(angle) * outerRadius;
        star[i].y = y + sin(angle) * outerRadius;
    }

    // 将最后一个点连接到第一个点，形成闭合的多边形
    star[2 * numPoints] = star[0];

    return star;
}</pre>
<p><img alt="" height="600" src="/images/proc_flag.png" width="900"/></p>
<h2>JAP</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    // 设置国旗的宽度和高度
    int width = 600;
    int height = 400;

    // 创建画布
    gdImagePtr img = gdImageCreateTrueColor(width, height);

    // 设置白色背景
    int white = gdImageColorAllocate(img, 255, 255, 255);
    gdImageFill(img, 0, 0, white);
  // 设置红色圆形
  int red = gdImageColorAllocate(img, 255, 0, 0);
  int centerX = width / 2;
  int centerY = height / 2;
  int radius = height / 4;  // 设置圆形的半径

  gdImageFilledEllipse(img, centerX, centerY, radius * 2, radius * 2, red);

  
    // 保存图片
    FILE *outputFile = fopen("japan_flag.png", "wb");
    gdImagePng(img, outputFile);
    fclose(outputFile);

    // 释放内存
    gdImageDestroy(img);

    printf("日本国旗已经绘制完成，保存为 japan_flag.png\n");

    return 0;
}</pre>
<p><img alt="" height="400" src="/images/japan_flag.png" width="600"/></p>
<h1>W15</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">#include &lt;stdio.h&gt;</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#include &lt;gd.h&gt;</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#include &lt;數學.h&gt;</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
無效draw_roc_flag（gdImagePtr img）；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
int main() {</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    整數寬度=1200；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int 高度 = (int)(寬度 * 2.0 / 3.0);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImagePtr img = gdImageCreateTrueColor(寬度, 高度);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageAlphaBlending(img, 0);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    繪製_roc_flag（img）；</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int 白色 = gdImageColorAllocate(img, 255, 255, 255);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageLine(img, 429, 125, 279, 165, 白色); </span><span style="vertical-align: inherit;">// A 到 B</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageLine(img, 279, 165, 170, 274, 白色); </span><span style="vertical-align: inherit;">// B 到 E</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageLine(img, 170, 274, 429, 125, 白色); </span><span style="vertical-align: inherit;">// E 到 D</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果（輸出檔== NULL）{</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        fprintf(stderr, "開啟輸出檔時發生錯誤。\n");</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        返回1；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    }</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImagePngEx(img, 輸出檔, 9);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    fclose(輸出檔);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageDestroy(img);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    返回0；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
}</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
無效draw_roc_flag（gdImagePtr img）{</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int 寬度 = gdImageSX(img);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int 高度 = gdImageSY(img);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int 紅、白、藍；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int center_x = (int)(寬度/4);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int center_y = (int)(高度 / 4);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int sun_radius = (int)(寬度/8);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int White_circle_dia = sun_radius;</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int 藍色圓直徑 = 白色圓直徑 + 白色圓直徑 * 2 / 15;</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    紅色 = gdImageColorAllocate(img, 255, 0, 0);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    白色 = gdImageColorAllocate(img, 255, 255, 255);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    藍色 = gdImageColorAllocate(img, 0, 0, 149);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageFilledRectangle(img, 0, 0, 寬度, 高度, 紅色);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageFilledRectangle(img, 0, 0, (int)(寬度 / 2.0), (int)(高度 / 2.0), 藍色);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    draw_white_sun(img, center_x, center_y, sun_radius, 白色);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, 藍色);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageFilledEllipse（img，center_x，center_y，white_circle_dia，white_circle_dia，白色）；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
}</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    浮點數 = M_PI / 180;</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int ax = center_x;</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    int ay = center_y - sun_radius；</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdPoint點[4]；</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[0].x = ax + sun_radius * sin(30 * deg);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[0].y = ay + sun_radius - sun_radius * cos(30 * deg);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[1].x = ax - sun_radius * tan(15 * deg) + sun_radius * 2 - sun_radius * 2 * cos(30 * deg);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[1].y = ay + sun_radius * 2 * sin(30 * deg);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[2].x = ax - sun_radius * sin(30 * deg);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[2].y = ay + sun_radius - (sun_radius - sun_radius * cos(30 * deg));</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[3].x = ax + sun_radius * 2 - sun_radius * 2 * cos(30 * deg);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    點[3].y = ay - sun_radius * 2 * sin(30 * deg);</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageLine(img, 點[0].x, 點[0].y, 點[1].x, 點[1].y, 顏色);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageLine(img, 點[1].x, 點[1].y, 點[2].x, 點[2].y, 顏色);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageLine(img, 點[2].x, 點[2].y, 點[3].x, 點[3].y, 顏色);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    gdImageLine(img, 點[3].x, 點[3].y, 點[0].x, 點[0].y, 顏色);</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
}</span></span><span></span>
</pre>
<p><img caption="false" height="267" src="/images/roc_flag_in_gd.png" width="400"/></p>
<p><video controls="controls" height="641" width="1000">
<source src="/downloads/roc.mp4" type="video/mp4"/></video></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

typedef struct {
    int x;
    int y;
} Point;

void findIntersectionPoints(int ellipseCenterX, int ellipseCenterY, int ellipseMajorAxis, int ellipseMinorAxis,
                             int lineX1, int lineY1, int lineX2, int lineY2) {
    // 计算线段的斜率
    double slope = (double)(lineY2 - lineY1) / (lineX2 - lineX1);

    // 椭圆参数
    double a = ellipseMajorAxis / 2.0;
    double b = ellipseMinorAxis / 2.0;

    // 将椭圆和线段移动至原点，方便计算
    double cx = lineX1 - ellipseCenterX;
    double cy = lineY1 - ellipseCenterY;

    // 计算椭圆和线段的交点
    double A = b * b + a * a * slope * slope;
    double B = 2 * a * a * slope * cy - 2 * a * a * slope * slope * cx;
    double C = a * a * slope * slope * cx * cx - a * a * b * b + a * a * cy * cy;

    // 计算交点的横坐标
    double x1 = (-B + sqrt(B * B - 4 * A * C)) / (2 * A);
    double x2 = (-B - sqrt(B * B - 4 * A * C)) / (2 * A);

    // 计算交点的纵坐标
    double y1 = slope * (x1 - cx) + cy;
    double y2 = slope * (x2 - cx) + cy;

    // 将交点坐标移动回原坐标系
    x1 += ellipseCenterX;
    x2 += ellipseCenterX;
    y1 += ellipseCenterY;
    y2 += ellipseCenterY;

    // 输出交点坐标
    printf("Intersection Point 1: (%.2f, %.2f)\n", x1, y1);
    printf("Intersection Point 2: (%.2f, %.2f)\n", x2, y2);
}

int main() {
    // 椭圆参数
    int ellipseCenterX = 429;
    int ellipseCenterY = 125;
    int ellipseMajorAxis = 100;
    int ellipseMinorAxis = 60;

    // 线段端点坐标
    int lineX1 = 429;
    int lineY1 = 125;
    int lineX2 = 279;
    int lineY2 = 165;

    // 寻找交点
    findIntersectionPoints(ellipseCenterX, ellipseCenterY, ellipseMajorAxis, ellipseMinorAxis,
                           lineX1, lineY1, lineX2, lineY2);

    return 0;
}
</pre>
<p><video controls="controls" height="641" width="1000">
<source src="/downloads/15-2.mp4" type="video/mp4"/></video><br/><br/></p>
<p></p>
<h1>EU</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

gdPoint *drawThinStar(int x, int y, int radius, int numPoints);

void draw_star_circle(gdImagePtr img);

int main() {
    // 设置图像宽度和高度
    int width = 900;  // 可根据需要调整
    int height = 600;  // 可根据需要调整

    // 创建画布
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    // 设置白色背景
    int blue = gdImageColorAllocate(img, 0, 0, 150);
    gdImageFill(img, 0, 0, blue);

    // 确保画布成功创建
    if (img == NULL) {
        fprintf(stderr, "画布创建失败\n");
        return 1;  // 返回错误代码
    }

    // 绘制星星圈
    draw_star_circle(img);

    // 保存图片
    FILE *outputFile = fopen("thin_star_circle.png", "wb");
    gdImagePng(img, outputFile);
    fclose(outputFile);

    // 释放内存
    gdImageDestroy(img);

    printf("星星圈已经绘制完成，保存为 thin_star_circle.png\n");

    return 0;
}

void draw_star_circle(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    // 分配颜色
    int yellow = gdImageColorAllocate(img, 255, 223, 0);  // 中黄色

    // 获取中心坐标
    int centerX = width / 2;
    int centerY = height / 2;

    // 半径和数量
    int radius = height / 3;
    int numStars = 12;

    // 绘制星星圈
    for (int i = 0; i &lt; numStars; i++) {
        double angle = (2 * M_PI * i) / numStars;

        // 计算星星位置
        int starX = centerX + cos(angle) * radius;
        int starY = centerY + sin(angle) * radius;

        // 绘制五角星
        gdImageFilledPolygon(img, drawThinStar(starX, starY, height / 30, 5), 10, yellow);
    }
}

gdPoint *drawThinStar(int x, int y, int radius, int numPoints) {
    int i;
    static gdPoint star[11];

    for (i = 0; i &lt; 2 * numPoints; i++) {
        double outerRadius = (i % 2 == 0) ? radius * 1.5 : radius * 0.5;  // 调整星星尖角的长度
        double angle = M_PI * i / numPoints;
        star[i].x = x + cos(angle) * outerRadius;
        star[i].y = y + sin(angle) * outerRadius;
    }

    // 将最后一个点连接到第一个点，形成闭合的多边形
    star[2 * numPoints] = star[0];

    return star;
}</pre>
<p>1</p>
<p><img alt="" height="400" src="/images/eu_flag.png" width="600"/></p>
<p><br/><span>Replit</span><span><span> </span>個人倉儲進行設定操作</span></p>
<h1>期末總結</h1>
<p>我覺得可以給自己60分。第一次給自己打分數時，我打了70分，因為覺得自己已經了解一些基礎的c語言，結果從老師問的問題中，發現自己懂的太少，沒有善用chatgpt這個工具，它其實可以從中找到許多知識，且能夠將程式碼解釋得很清楚。</p>
<p>所以經過這堂課程後，我了解到chatgpt是在自學時非常有幫助的工具，從國旗的程式到一些基礎c程式都靠chatgpt的幫助才做出來，也因為經過多次的練習，在chatgpt提問時，能夠更精準的得到想要的答案，並修改或整理為需要的程式碼，這不僅僅提升了我對c語言的認知，也提升了我自學的能力。</p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>